:py:mod:`guikit.core`
=====================

.. py:module:: guikit.core

.. autoapi-nested-parse::

   Contains the definition of the top window of the program, including the menu bar, the
   toolbar (if any), the central widget, bottom progress bar and status area.

   In particular, the progress bar and the status area are the kind of things that the
   plugins will be importing - or at least wanting to update - regularly. They are defined
   as global aobject singletons such that even though an instance is created once, such an
   instance can be access directly from the class anywhere else where you import the class.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   guikit.core.StatusBar
   guikit.core.MainWindow
   guikit.core.MainApp



Functions
~~~~~~~~~

.. autoapisummary::

   guikit.core.stop_threads_and_close_window



Attributes
~~~~~~~~~~

.. autoapisummary::

   guikit.core.status_bar
   guikit.core._tab_location


.. py:class:: StatusBar(*args, progress_bar_width = 150, **kwargs)

   Bases: :py:obj:`wx.StatusBar`

   Class to manage the top level status and progress bar.

   This class should not be used directly, but rather the `status_bar` instance within
   the `guikit.core` module shall be used.

   It provides two fields:
       - field 0: Automatic display of menu and tools descriptions as well as custom
           status messages
       - field 1: Holds the progress bar. Do not use it for displaying text.

   Use 'status_bar.SomeMethod` to manage the status bar messages and properties. See
   'wx.StatusBar' for more information about the options available.

   Use `status_bar.progress_bar.SomeMethod` to manage the progress bar properties.
   See 'wx.Gauge' for more information about the options available.

   .. py:method:: SetStatusWidths(width)

      Ensures that progress bar is resized if fields are resized.

      :param width: Width of the progress bar.



.. py:data:: status_bar
   :type: Optional[StatusBar]

   Main status bar of the program

.. py:class:: MainWindow(parent, title, size, notebook_layout = True, tab_style = wx.NB_TOP)

   Bases: :py:obj:`wx.Frame`

   .. py:method:: populate_window()

      Adds menu items, tools and other widgets in plugins to the main window.


   .. py:method:: on_quit(evt)

      Event to close the main window from the menu.


   .. py:method:: populate_built_in_menu()

      Populate the menu with some built-in capabilities.


   .. py:method:: _make_menubar()

      Create the menu bar from the entries provided by the widgets.


   .. py:method:: _make_toolbar()

      Create the tool bar from the entries provided by the widgets.


   .. py:method:: _make_notebook(tab_style = wx.NB_TOP)

      Create the central widget of the window as a notebook.

      A notebook is created as the central widget and any other view provided by the
      plugins is added as new page. Finally, the first page is selected.

      :param tab_style: integer indicating the position of the tabs. Valid values (OS
                        dependent) are wx.NB_TOP, wx.NB_LEFT, wx.NB_RIGHT, wx.NB_BOTTOM,
                        wx.NB_FIXEDWIDTH, wx.NB_MULTILINE and wx.NB_NOPAGETHEME.


   .. py:method:: _make_central_widget()

      Create the central widget of the window.

      Such a central widget is taken from the plugins. Exactly one central widget
      needs to be provided between all plugins.

      :raises ValueError: If the number of central widgets found is not 1.



.. py:data:: _tab_location
   :type: Dict[str, int]

   

.. py:class:: MainApp(*args, title, size_mainwindow = (800, 600), plugins_list = None, notebook_layout = True, tab_style = 'top', **kwargs)

   Bases: :py:obj:`wx.App`

   .. py:method:: OnInit()



.. py:function:: stop_threads_and_close_window(event)

   Stop all running threads and close main window.


