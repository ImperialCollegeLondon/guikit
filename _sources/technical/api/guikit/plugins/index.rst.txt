:py:mod:`guikit.plugins`
========================

.. py:module:: guikit.plugins

.. autoapi-nested-parse::

   Contains all the machinery to register and load plugins.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   guikit.plugins.MenuTool
   guikit.plugins.Tab
   guikit.plugins.PluginBase



Functions
~~~~~~~~~

.. autoapisummary::

   guikit.plugins.collect_plugins
   guikit.plugins.collect_builtin_extensions
   guikit.plugins.load_plugins



Attributes
~~~~~~~~~~

.. autoapisummary::

   guikit.plugins.KNOWN_PLUGINS


.. py:data:: KNOWN_PLUGINS
   :type: List[Type[PluginBase]]
   :value: []

   List of plugins registered as subclasses of PluginBase.

.. py:class:: MenuTool

   Compiles the information required to add menu and toolbar items.

   .. py:attribute:: menu
      :type: str
      :value: ''

      

   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: text
      :type: str
      :value: ''

      

   .. py:attribute:: description
      :type: str
      :value: ''

      

   .. py:attribute:: short_help
      :type: str
      :value: ''

      

   .. py:attribute:: callback
      :type: Optional[Callable[[wx.Event], None]]

      

   .. py:attribute:: kind
      :type: wx.ItemKind

      

   .. py:attribute:: bitmap
      :type: Optional[wx.Bitmap]

      


.. py:class:: Tab

   Compiles the information required to define add tabs.

   .. py:attribute:: page
      :type: wx.Window

      

   .. py:attribute:: text
      :type: str

      

   .. py:attribute:: select
      :type: bool
      :value: False

      

   .. py:attribute:: imageId
      :type: int

      

   .. py:attribute:: order
      :type: int
      :value: 0

      


.. py:class:: PluginBase

   Bases: :py:obj:`abc.ABC`

   Base class that defines the required API that all the views of the different plugins
   will need to provide.

   .. py:method:: __init_subclass__()
      :classmethod:


   .. py:method:: menu_entries()

      Return a list of menu entries provided by this plugin.

      The items of the list must be MenuTool objects.

      :returns: A list of MenuTool objects provided by this plugin to be added to the
                application menu bar.


   .. py:method:: toolbar_items()

      Return a list of toolbar items provided by this plugin.

      The items of the list must be MenuTool objects.

      :returns: A list of MenuTool objects provided by this plugin to be added to the
                application toolbar.


   .. py:method:: tabs(parent=None)

      Create and return the list of tabs provided by this plugin.

      The elements of the list must be Tab objects.

      :param parent: The application notebook, to be used as parent during the creation
      :param of the tabs.:

      :returns: A list of Tab objects provided by this plugin to be added to the application
                notebook.


   .. py:method:: central(parent=None)

      Central widget provided by this plugin.

      :param parent: The main window, to be used as parent during the creation of the
      :param widget.:

      :returns: None (if no central widget provided) or any object derived from
                wx.MainWindow (pretty much, any widget).



.. py:function:: collect_plugins(path, package = None, add_to_path = False)

   Collects the plugins from the given location.

   This function collects the modules and packages available in chosen location. If
   they are not directly importable by Python (i.e. they are not in the path), either
   the name of the containing package should be supplied or the add_to_path flag must
   be set to True.

   Eg. If path = "/some/location/with/tools/mytool", and "mytool" is an importable
   package with "import mytool", plugins within "mytool" folder will be included with
   no extra arguments.

   If "mytool" is not importable but "tools" is, i.e. 'import tools.mytool' works,
   then you should add "package='tools'".

   If neither "mytool" nor anything else in its path is importable, then the path can
   be added to the module's import path, sys.path, so the plugins within can be
   imported as "import plugin".

   :param path: Directory to explore.
   :param package: Package in which the directory is contained.
   :param add_to_path: If the directory should be added to the import path.

   :returns: List of modules and packages to be imported in the form
             "package.subpackage.plugin", where "plugin" can be a module (a python file) or
             a package itself (a folder containing a __init__.py file).


.. py:function:: collect_builtin_extensions()

   Search for plugins to be loaded in the "extensions" subfolder.

   These plugins can be single modules (simple_plugin.py) or more complex modules
   defined as packages (i.e. they are folders with a __init__.py file).

   :returns: A list of plugins names to be loaded.


.. py:function:: load_plugins(plugin_list)

   Loads the plugins of the list.

   :param plugin_list: A list of plugins to be loaded.


