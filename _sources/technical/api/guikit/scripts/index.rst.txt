:py:mod:`guikit.scripts`
========================

.. py:module:: guikit.scripts


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   guikit.scripts.SubCommand
   guikit.scripts.RunSubCommand
   guikit.scripts.InitSubCommand
   guikit.scripts.PluginSubCommand



Functions
~~~~~~~~~

.. autoapisummary::

   guikit.scripts.run
   guikit.scripts._init_repo
   guikit.scripts._list_plugins
   guikit.scripts._copy_plugin
   guikit.scripts._parse_args
   guikit.scripts.main



Attributes
~~~~~~~~~~

.. autoapisummary::

   guikit.scripts.app_name
   guikit.scripts._SUB_COMMANDS
   guikit.scripts._SUB_COMMAND_BY_NAME


.. py:data:: app_name
   

   

.. py:function:: run()

   Runs guikit as an application, loading all the plugins available.


.. py:function:: _init_repo(path, name)

   Initialises repository with the files/folders required to use guikit.

   This is done by copying the skeleton repository structure within guikit to the
   desired location.

   :param path: Where the repository should be initialized. Default: current.
   :param name: Name of the application.


.. py:function:: _list_plugins()

   Lists all plugins available in guikit that the user can copy.


.. py:function:: _copy_plugin(name, target)

   Lists all plugins available in guikit that the user can copy.

   :param name: List of plugins to copy.
   :param target: Root destination for the plugins.


.. py:class:: SubCommand(name, description)

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: add_arguments(self, parser)
      :abstractmethod:


   .. py:method:: run(self, args)
      :abstractmethod:



.. py:class:: RunSubCommand

   Bases: :py:obj:`SubCommand`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: add_arguments(self, parser)


   .. py:method:: run(self, args)



.. py:class:: InitSubCommand

   Bases: :py:obj:`SubCommand`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: add_arguments(self, parser)


   .. py:method:: run(self, args)



.. py:class:: PluginSubCommand

   Bases: :py:obj:`SubCommand`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: add_arguments(self, parser)


   .. py:method:: run(self, args)



.. py:data:: _SUB_COMMANDS
   :annotation: :List[SubCommand]

   

.. py:data:: _SUB_COMMAND_BY_NAME
   :annotation: :Dict[str, SubCommand]

   

.. py:function:: _parse_args(argv = None)

   Parse the input arguments list populating the relevant subcommands

   :param argv: List of arguments

   :returns: The namespace containing the relevant sub command information and arguments.


.. py:function:: main(argv = None)

   Main entry point for guikit, calling the relevant subcommands.

   :param argv: List of input arguments, including subcommand.

   Returns:



